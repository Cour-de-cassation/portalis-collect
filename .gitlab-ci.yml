image: docker:$DOCKER_BUILD_VERSION_NEW
services:
  - docker:$DOCKER_BUILD_VERSION_NEW-dind

variables:
  docker_image_dev: "$CI_REGISTRY/$CI_PROJECT_PATH:latest-dev"
  docker_image: "$CI_REGISTRY/$CI_PROJECT_PATH:latest"
  docker_image_version: "$CI_REGISTRY/$CI_PROJECT_PATH:$PROJECT_VERSION"
  HTTP_PROXY: $HTTP_PROXY_DEV
  HTTPS_PROXY: $HTTPS_PROXY_DEV
  PROJECT_VERSION: "1.0.0"

stages:
  - build
  - dev
  - preprod
  - prod

before_script:
  - export PROJECT_VERSION=$(echo $PROJECT_VERSION | awk -F. -v OFS=. '{if ($3 < 9) $3=$3+1; else if ($2 < 9) {$2=$2+1; $3=0;} else {$1=$1+1; $2=0; $3=0;}} {print $0}')
  - docker_login

.docker_login: &docker_login
  - echo "Logging in to Docker registry..."
  - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

.docker_build_and_push: &docker_build_and_push
  - docker build
      --build-arg http_proxy=$HTTP_PROXY
      --build-arg https_proxy=$HTTPS_PROXY
      -f $DOCKERFILE
      -t $IMAGE_TAG .
  - docker push $IMAGE_TAG

build_dev:
  stage: build
  variables:
    DOCKERFILE: "dockerfile.dev"
    IMAGE_TAG: "$docker_image_dev"
  script:
    - *docker_build_and_push
  tags:
    - docker

build:
  stage: build
  variables:
    DOCKERFILE: "Dockerfile"
    IMAGE_TAG: "$docker_image"
  script:
    - *docker_build_and_push
    - docker tag $docker_image $docker_image_version
    - docker push $docker_image_version
  tags:
    - docker

.docker_pull_and_tag: &docker_pull_and_tag
  - docker pull $SOURCE_IMAGE
  - docker tag $SOURCE_IMAGE $TARGET_IMAGE

dev:
  stage: dev
  variables:
    SOURCE_IMAGE: "$docker_image_dev"
    TARGET_IMAGE: "$CI_PROJECT_NAME-dev"
  script:
    - *docker_pull_and_tag
  tags:
    - docker

preprod:
  stage: preprod
  variables:
    SOURCE_IMAGE: "$docker_image"
    TARGET_IMAGE: "$CI_PROJECT_NAME-preprod"
  script:
    - *docker_pull_and_tag
  tags:
    - docker

prod:
  stage: prod
  variables:
    SOURCE_IMAGE: "$docker_image"
    TARGET_IMAGE: "$CI_PROJECT_NAME-prod"
  script:
    - *docker_pull_and_tag
  tags:
    - docker
